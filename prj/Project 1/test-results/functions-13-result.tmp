(TEST 13) cmd_print_output_1
COMMENTS:

program: ./test_cmd cmd_print_output_1
Failure messages:
- FAILURE(13): Valgrind detected errors
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/functions-13-expect.tmp
- Actual output in: test-results/raw/functions-13-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                         ==== ACTUAL ====                                                      
{                                                                        {
    // Tests whether cmd_print_output() correctly                            // Tests whether cmd_print_output() correctly
    // captures and prints a completed command's output.                     // captures and prints a completed command's output.
    char *argv[] = {                                                         char *argv[] = {
      "cat",                                                                   "cat",
      "test_data/quote.txt",                                                   "test_data/quote.txt",
      "test_data/gettysburg.txt",                                              "test_data/gettysburg.txt",
      NULL                                                                     NULL
    };                                                                       };
    cmd_t *cmd = cmd_new(argv);                                              cmd_t *cmd = cmd_new(argv);
    cmd_start(cmd);                // start running                          cmd_start(cmd);                // start running
    cmd_update_state(cmd,DOBLOCK); // wait for completion                    cmd_update_state(cmd,DOBLOCK); // wait for completion
                                   // should see an alert                                                   // should see an alert
    cmd_print_output(cmd);                                                   cmd_print_output(cmd);
    cmd_free(cmd);                                                           cmd_free(cmd);
}                                                                        }
Object-oriented programming is an exceptionally bad idea which could   | cat[%0]: EXIT(0)
only have originated in California.                                    <

-- Edsger Dijkstra                                                     <
Four score and seven years ago our fathers brought forth on this       <
continent, a new nation, conceived in Liberty, and dedicated to the    <
proposition that all men are created equal.                            <
                                                                       <
Now we are engaged in a great civil war, testing whether that nation,  <
or any nation so conceived and so dedicated, can long endure. We are   <
met on a great battle-field of that war. We have come to dedicate a    <
portion of that field, as a final resting place for those who here     <
gave their lives that that nation might live. It is altogether fitting <
and proper that we should do this.                                     <
                                                                       <
But, in a larger sense, we can not dedicate -- we can not consecrate   <
-- we can not hallow -- this ground. The brave men, living and dead,   <
who struggled here, have consecrated it, far above our poor power to   <
add or detract. The world will little note, nor long remember what we  <
say here, but it can never forget what they did here. It is for us the <
living, rather, to be dedicated here to the unfinished work which they <
who fought here have thus far so nobly advanced. It is rather for us   <
to be here dedicated to the great task remaining before us -- that     <
from these honored dead we take increased devotion to that cause for   <
which they gave the last full measure of devotion -- that we here      <
highly resolve that these dead shall not have died in vain -- that     <
this nation, under God, shall have a new birth of freedom -- and that  <
government of the people, by the people, for the people, shall not     <
perish from the earth.                                                 <
                                                                       <
Abraham Lincoln                                                        <
November 19, 1863                                                      <
ALERTS:                                                                  ALERTS:
@!!! cat[%0]: EXIT(0)                                                  <
                                                                       <
--- Line Differences ---
EXPECT:  17) Object-oriented programming is an exceptionally bad idea which could
EXPECT:  18) only have originated in California.
ACTUAL:  17) cat[%0]: EXIT(0)
EXPECT:  20) -- Edsger Dijkstra
EXPECT:  21) Four score and seven years ago our fathers brought forth on this
EXPECT:  22) continent, a new nation, conceived in Liberty, and dedicated to the
EXPECT:  23) proposition that all men are created equal.
EXPECT:  24) 
EXPECT:  25) Now we are engaged in a great civil war, testing whether that nation,
EXPECT:  26) or any nation so conceived and so dedicated, can long endure. We are
EXPECT:  27) met on a great battle-field of that war. We have come to dedicate a
EXPECT:  28) portion of that field, as a final resting place for those who here
EXPECT:  29) gave their lives that that nation might live. It is altogether fitting
EXPECT:  30) and proper that we should do this.
EXPECT:  31) 
EXPECT:  32) But, in a larger sense, we can not dedicate -- we can not consecrate
EXPECT:  33) -- we can not hallow -- this ground. The brave men, living and dead,
EXPECT:  34) who struggled here, have consecrated it, far above our poor power to
EXPECT:  35) add or detract. The world will little note, nor long remember what we
EXPECT:  36) say here, but it can never forget what they did here. It is for us the
EXPECT:  37) living, rather, to be dedicated here to the unfinished work which they
EXPECT:  38) who fought here have thus far so nobly advanced. It is rather for us
EXPECT:  39) to be here dedicated to the great task remaining before us -- that
EXPECT:  40) from these honored dead we take increased devotion to that cause for
EXPECT:  41) which they gave the last full measure of devotion -- that we here
EXPECT:  42) highly resolve that these dead shall not have died in vain -- that
EXPECT:  43) this nation, under God, shall have a new birth of freedom -- and that
EXPECT:  44) government of the people, by the people, for the people, shall not
EXPECT:  45) perish from the earth.
EXPECT:  46) 
EXPECT:  47) Abraham Lincoln
EXPECT:  48) November 19, 1863
EXPECT:  50) @!!! cat[%0]: EXIT(0)
EXPECT:  51) 

--- Valgrind Log from: test-results/raw/functions-13-valgrd.tmp ---
==20700== Memcheck, a memory error detector
==20700== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20700== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==20700== Command: ./test_cmd cmd_print_output_1
==20700== Parent PID: 20699
==20700== 
==20703== Syscall param execve(argv) points to uninitialised byte(s)
==20703==    at 0x493D2FB: execve (syscall-template.S:78)
==20703==    by 0x493DCEE: __execvpe_common (execvpe.c:136)
==20703==    by 0x493DCEE: execvpe (execvpe.c:190)
==20703==    by 0x10B4CE: cmd_start (cmd.c:85)
==20703==    by 0x10A3DB: main (test_cmd.c:312)
==20703==  Address 0x4a4c158 is 280 bytes inside a block of size 2,352 alloc'd
==20703==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20703==    by 0x10B23B: cmd_new (cmd.c:25)
==20703==    by 0x10A3C5: main (test_cmd.c:311)
==20703==  Uninitialised value was created by a heap allocation
==20703==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20703==    by 0x10B23B: cmd_new (cmd.c:25)
==20703==    by 0x10A3C5: main (test_cmd.c:311)
==20703== 
==20700== Conditional jump or move depends on uninitialised value(s)
==20700==    at 0x483EF49: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20700==    by 0x48DE5B3: puts (ioputs.c:35)
==20700==    by 0x10B7C0: cmd_print_output (cmd.c:192)
==20700==    by 0x10A3FE: main (test_cmd.c:315)
==20700==  Uninitialised value was created by a heap allocation
==20700==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20700==    by 0x10B645: read_all (cmd.c:140)
==20700==    by 0x10B727: cmd_fetch_output (cmd.c:174)
==20700==    by 0x10B5CD: cmd_update_state (cmd.c:119)
==20700==    by 0x10A3EF: main (test_cmd.c:313)
==20700== 
==20700== Conditional jump or move depends on uninitialised value(s)
==20700==    at 0x10B3E5: cmd_free (cmd.c:49)
==20700==    by 0x10A40D: main (test_cmd.c:316)
==20700==  Uninitialised value was created by a heap allocation
==20700==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20700==    by 0x10B23B: cmd_new (cmd.c:25)
==20700==    by 0x10A3C5: main (test_cmd.c:311)
==20700== 
==20700== 
==20700== HEAP SUMMARY:
==20700==     in use at exit: 0 bytes in 0 blocks
==20700==   total heap usage: 5 allocs, 5 frees, 3,118 bytes allocated
==20700== 
==20700== All heap blocks were freed -- no leaks are possible
==20700== 
==20700== For lists of detected and suppressed errors, rerun with: -s
==20700== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

