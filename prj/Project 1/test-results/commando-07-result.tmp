(TEST 7) sleep for 1s
COMMENTS:
Runs the OS program 'sleep' to sleep for 1 second then waits for it to
complete. Tests whether the 'wait-for' built-in command blocks
commando properly.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-07-expect.tmp
- Actual output in: test-results/raw/commando-07-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                               ==== ACTUAL ====                            
@> sleep 1                                   | @>
@> wait-for 0                                <
@> output-for 0                              <
@<<< Output for sleep[%0] (0 bytes):         <
----------------------------------------     <
----------------------------------------     <
@> list                                      <
JOB  #PID      STAT   STR_STAT OUTB COMMAND  <
0    %0           0    EXIT(0)    0 sleep 1  <
@> exit                                      <
ALERTS:                                        ALERTS:
@!!! sleep[%0]: EXIT(0)                      <
--- Line Differences ---
EXPECT:   1) @> sleep 1
EXPECT:   2) @> wait-for 0
EXPECT:   3) @> output-for 0
EXPECT:   4) @<<< Output for sleep[%0] (0 bytes):
EXPECT:   5) ----------------------------------------
EXPECT:   6) ----------------------------------------
EXPECT:   7) @> list
EXPECT:   8) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:   9) 0    %0           0    EXIT(0)    0 sleep 1 
EXPECT:  10) @> exit
ACTUAL:   1) @>
EXPECT:  12) @!!! sleep[%0]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-07-valgrd.tmp ---
==21209== Memcheck, a memory error detector
==21209== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21209== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==21209== Command: ./commando --echo
==21209== Parent PID: 21208
==21209== 
==21209== Invalid write of size 1
==21209==    at 0x48DDA01: _IO_getline_info (iogetline.c:77)
==21209==    by 0x48DC849: fgets (iofgets.c:53)
==21209==    by 0x1095CC: main (commando.c:37)
==21209==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==21209== 
==21209== 
==21209== Process terminating with default action of signal 11 (SIGSEGV)
==21209==  Access not within mapped region at address 0x0
==21209==    at 0x48DDA01: _IO_getline_info (iogetline.c:77)
==21209==    by 0x48DC849: fgets (iofgets.c:53)
==21209==    by 0x1095CC: main (commando.c:37)
==21209==  If you believe this happened as a result of a stack
==21209==  overflow in your program's main thread (unlikely but
==21209==  possible), you can try to increase the size of the
==21209==  main thread stack using the --main-stacksize= flag.
==21209==  The main thread stack size used in this run was 8388608.
==21209== 
==21209== HEAP SUMMARY:
==21209==     in use at exit: 8,200 bytes in 1 blocks
==21209==   total heap usage: 1 allocs, 0 frees, 8,200 bytes allocated
==21209== 
==21209== 8,200 bytes in 1 blocks are still reachable in loss record 1 of 1
==21209==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==21209==    by 0x109599: main (commando.c:33)
==21209== 
==21209== LEAK SUMMARY:
==21209==    definitely lost: 0 bytes in 0 blocks
==21209==    indirectly lost: 0 bytes in 0 blocks
==21209==      possibly lost: 0 bytes in 0 blocks
==21209==    still reachable: 8,200 bytes in 1 blocks
==21209==         suppressed: 0 bytes in 0 blocks
==21209== 
==21209== For lists of detected and suppressed errors, rerun with: -s
==21209== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

