(TEST 8) ls multiple times
COMMENTS:
Calls ls twice to check if these have distinct pids.  Waits for both
to finish then shows the output for them which should be identical as
they are both called on the test_data/stuff directory.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-08-expect.tmp
- Actual output in: test-results/raw/commando-08-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                 ==== ACTUAL ====                                              
@> ls -a -F test_data/stuff/                                   | @>
@> ls -a -F test_data/stuff/                                   <
@> wait-for 0                                                  <
@> wait-for 1                                                  <
@> list                                                        <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                    <
0    %0           0    EXIT(0)   55 ls -a -F test_data/stuff/  <
1    %1           0    EXIT(0)   55 ls -a -F test_data/stuff/  <
@> output-for 0                                                <
@<<< Output for ls[%0] (55 bytes):                             <
----------------------------------------                       <
./                                                             <
../                                                            <
empty                                                          <
gettysburg.txt                                                 <
quote.txt                                                      <
table.sh*                                                      <
util.o                                                         <
----------------------------------------                       <
@> output-for 1                                                <
@<<< Output for ls[%1] (55 bytes):                             <
----------------------------------------                       <
./                                                             <
../                                                            <
empty                                                          <
gettysburg.txt                                                 <
quote.txt                                                      <
table.sh*                                                      <
util.o                                                         <
----------------------------------------                       <
@> exit                                                        <
ALERTS:                                                          ALERTS:
@!!! ls[%0]: EXIT(0)                                           <
@!!! ls[%1]: EXIT(0)                                           <
--- Line Differences ---
EXPECT:   1) @> ls -a -F test_data/stuff/
EXPECT:   2) @> ls -a -F test_data/stuff/
EXPECT:   3) @> wait-for 0
EXPECT:   4) @> wait-for 1
EXPECT:   5) @> list
EXPECT:   6) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:   7) 0    %0           0    EXIT(0)   55 ls -a -F test_data/stuff/ 
EXPECT:   8) 1    %1           0    EXIT(0)   55 ls -a -F test_data/stuff/ 
EXPECT:   9) @> output-for 0
EXPECT:  10) @<<< Output for ls[%0] (55 bytes):
EXPECT:  11) ----------------------------------------
EXPECT:  12) ./
EXPECT:  13) ../
EXPECT:  14) empty
EXPECT:  15) gettysburg.txt
EXPECT:  16) quote.txt
EXPECT:  17) table.sh*
EXPECT:  18) util.o
EXPECT:  19) ----------------------------------------
EXPECT:  20) @> output-for 1
EXPECT:  21) @<<< Output for ls[%1] (55 bytes):
EXPECT:  22) ----------------------------------------
EXPECT:  23) ./
EXPECT:  24) ../
EXPECT:  25) empty
EXPECT:  26) gettysburg.txt
EXPECT:  27) quote.txt
EXPECT:  28) table.sh*
EXPECT:  29) util.o
EXPECT:  30) ----------------------------------------
EXPECT:  31) @> exit
ACTUAL:   1) @>
EXPECT:  33) @!!! ls[%0]: EXIT(0)
EXPECT:  34) @!!! ls[%1]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-08-valgrd.tmp ---
==21240== Memcheck, a memory error detector
==21240== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21240== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==21240== Command: ./commando --echo
==21240== Parent PID: 21239
==21240== 
==21240== Invalid write of size 1
==21240==    at 0x48DDA01: _IO_getline_info (iogetline.c:77)
==21240==    by 0x48DC849: fgets (iofgets.c:53)
==21240==    by 0x1095CC: main (commando.c:37)
==21240==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==21240== 
==21240== 
==21240== Process terminating with default action of signal 11 (SIGSEGV)
==21240==  Access not within mapped region at address 0x0
==21240==    at 0x48DDA01: _IO_getline_info (iogetline.c:77)
==21240==    by 0x48DC849: fgets (iofgets.c:53)
==21240==    by 0x1095CC: main (commando.c:37)
==21240==  If you believe this happened as a result of a stack
==21240==  overflow in your program's main thread (unlikely but
==21240==  possible), you can try to increase the size of the
==21240==  main thread stack using the --main-stacksize= flag.
==21240==  The main thread stack size used in this run was 8388608.
==21240== 
==21240== HEAP SUMMARY:
==21240==     in use at exit: 8,200 bytes in 1 blocks
==21240==   total heap usage: 1 allocs, 0 frees, 8,200 bytes allocated
==21240== 
==21240== 8,200 bytes in 1 blocks are still reachable in loss record 1 of 1
==21240==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==21240==    by 0x109599: main (commando.c:33)
==21240== 
==21240== LEAK SUMMARY:
==21240==    definitely lost: 0 bytes in 0 blocks
==21240==    indirectly lost: 0 bytes in 0 blocks
==21240==      possibly lost: 0 bytes in 0 blocks
==21240==    still reachable: 8,200 bytes in 1 blocks
==21240==         suppressed: 0 bytes in 0 blocks
==21240== 
==21240== For lists of detected and suppressed errors, rerun with: -s
==21240== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

