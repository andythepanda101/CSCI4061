(TEST 10) cmd_update_1
COMMENTS:

program: ./test_cmd cmd_update_1
Failure messages:
- FAILURE(13): Valgrind detected errors
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/functions-10-expect.tmp
- Actual output in: test-results/raw/functions-10-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                         ==== ACTUAL ====                                                      
{                                                                        {
    // Tests whether cmd_update() correctly checks                           // Tests whether cmd_update() correctly checks
    // on a running command and blocks the calling                           // on a running command and blocks the calling
    // process until the cmd is finished. Then checks                        // process until the cmd is finished. Then checks
    // that the cmd_t is updated correctly based on                          // that the cmd_t is updated correctly based on
    // completion of the cmd.                                                // completion of the cmd.
    char *argv[] = {                                                         char *argv[] = {
      "cat",                                                                   "cat",
      "test_data/quote.txt",                                                   "test_data/quote.txt",
      "test_data/gettysburg.txt",                                              "test_data/gettysburg.txt",
      NULL                                                                     NULL
    };                                                                       };
    cmd_t *cmd = cmd_new(argv);                                              cmd_t *cmd = cmd_new(argv);
    cmd_start(cmd);                // start running                          cmd_start(cmd);                // start running
    cmd_update_state(cmd,DOBLOCK); // wait for completion                    cmd_update_state(cmd,DOBLOCK); // wait for completion
                                   // should see an alert                                                   // should see an alert
    test_print_cmd(cmd);           // show completed cmd                     test_print_cmd(cmd);           // show completed cmd
    cmd_free(cmd);                                                           cmd_free(cmd);
}                                                                        }
                                                                       > cat[%0]: EXIT(0)
cmd->name: cat                                                           cmd->name: cat
cmd->argv[]:                                                             cmd->argv[]:
  [  0] : cat                                                              [  0] : cat
  [  1] : test_data/quote.txt                                              [  1] : test_data/quote.txt
  [  2] : test_data/gettysburg.txt                                         [  2] : test_data/gettysburg.txt
  [  3] : (null)                                                           [  3] : (null)
cmd->pid > 0 : yes                                                       cmd->pid > 0 : yes
cmd->pid: %0                                                             cmd->pid: %0
cmd->out_pipe[PREAD]  > 0: yes                                           cmd->out_pipe[PREAD]  > 0: yes
cmd->out_pipe[PWRITE] > 0: yes                                           cmd->out_pipe[PWRITE] > 0: yes
cmd->status: 0                                                           cmd->status: 0
cmd->str_status: EXIT(0)                                               | cmd->str_status: RUN
cmd->finished: 1                                                         cmd->finished: 1
cmd->output_size: 1636                                                 | cmd->output_size: -1
cmd->output:                                                             cmd->output:
Object-oriented programming is an exceptionally bad idea which could   <
only have originated in California.                                    <
                                                                       <
-- Edsger Dijkstra                                                     <
Four score and seven years ago our fathers brought forth on this       <
continent, a new nation, conceived in Liberty, and dedicated to the    <
proposition that all men are created equal.                            <
                                                                       <
Now we are engaged in a great civil war, testing whether that nation,  <
or any nation so conceived and so dedicated, can long endure. We are   <
met on a great battle-field of that war. We have come to dedicate a    <
portion of that field, as a final resting place for those who here     <
gave their lives that that nation might live. It is altogether fitting <
and proper that we should do this.                                     <
                                                                       <
But, in a larger sense, we can not dedicate -- we can not consecrate   <
-- we can not hallow -- this ground. The brave men, living and dead,   <
who struggled here, have consecrated it, far above our poor power to   <
add or detract. The world will little note, nor long remember what we  <
say here, but it can never forget what they did here. It is for us the <
living, rather, to be dedicated here to the unfinished work which they <
who fought here have thus far so nobly advanced. It is rather for us   <
to be here dedicated to the great task remaining before us -- that     <
from these honored dead we take increased devotion to that cause for   <
which they gave the last full measure of devotion -- that we here      <
highly resolve that these dead shall not have died in vain -- that     <
this nation, under God, shall have a new birth of freedom -- and that  <
government of the people, by the people, for the people, shall not     <
perish from the earth.                                                 <
                                                                       <
Abraham Lincoln                                                        <
November 19, 1863                                                      <

ALERTS:                                                                  ALERTS:
@!!! cat[%0]: EXIT(0)                                                  <
--- Line Differences ---
ACTUAL:  20) cat[%0]: EXIT(0)
EXPECT:  31) cmd->str_status: EXIT(0)
ACTUAL:  32) cmd->str_status: RUN
EXPECT:  33) cmd->output_size: 1636
ACTUAL:  34) cmd->output_size: -1
EXPECT:  35) Object-oriented programming is an exceptionally bad idea which could
EXPECT:  36) only have originated in California.
EXPECT:  37) 
EXPECT:  38) -- Edsger Dijkstra
EXPECT:  39) Four score and seven years ago our fathers brought forth on this
EXPECT:  40) continent, a new nation, conceived in Liberty, and dedicated to the
EXPECT:  41) proposition that all men are created equal.
EXPECT:  42) 
EXPECT:  43) Now we are engaged in a great civil war, testing whether that nation,
EXPECT:  44) or any nation so conceived and so dedicated, can long endure. We are
EXPECT:  45) met on a great battle-field of that war. We have come to dedicate a
EXPECT:  46) portion of that field, as a final resting place for those who here
EXPECT:  47) gave their lives that that nation might live. It is altogether fitting
EXPECT:  48) and proper that we should do this.
EXPECT:  49) 
EXPECT:  50) But, in a larger sense, we can not dedicate -- we can not consecrate
EXPECT:  51) -- we can not hallow -- this ground. The brave men, living and dead,
EXPECT:  52) who struggled here, have consecrated it, far above our poor power to
EXPECT:  53) add or detract. The world will little note, nor long remember what we
EXPECT:  54) say here, but it can never forget what they did here. It is for us the
EXPECT:  55) living, rather, to be dedicated here to the unfinished work which they
EXPECT:  56) who fought here have thus far so nobly advanced. It is rather for us
EXPECT:  57) to be here dedicated to the great task remaining before us -- that
EXPECT:  58) from these honored dead we take increased devotion to that cause for
EXPECT:  59) which they gave the last full measure of devotion -- that we here
EXPECT:  60) highly resolve that these dead shall not have died in vain -- that
EXPECT:  61) this nation, under God, shall have a new birth of freedom -- and that
EXPECT:  62) government of the people, by the people, for the people, shall not
EXPECT:  63) perish from the earth.
EXPECT:  64) 
EXPECT:  65) Abraham Lincoln
EXPECT:  66) November 19, 1863
EXPECT:  69) @!!! cat[%0]: EXIT(0)

--- Valgrind Log from: test-results/raw/functions-10-valgrd.tmp ---
==20595== Memcheck, a memory error detector
==20595== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20595== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==20595== Command: ./test_cmd cmd_update_1
==20595== Parent PID: 20594
==20595== 
==20598== Syscall param execve(argv) points to uninitialised byte(s)
==20598==    at 0x493D2FB: execve (syscall-template.S:78)
==20598==    by 0x493DCEE: __execvpe_common (execvpe.c:136)
==20598==    by 0x493DCEE: execvpe (execvpe.c:190)
==20598==    by 0x10B4CE: cmd_start (cmd.c:85)
==20598==    by 0x10A110: main (test_cmd.c:248)
==20598==  Address 0x4a4c158 is 280 bytes inside a block of size 2,352 alloc'd
==20598==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20598==    by 0x10B23B: cmd_new (cmd.c:25)
==20598==    by 0x10A0FA: main (test_cmd.c:247)
==20598==  Uninitialised value was created by a heap allocation
==20598==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20598==    by 0x10B23B: cmd_new (cmd.c:25)
==20598==    by 0x10A0FA: main (test_cmd.c:247)
==20598== 
==20595== Conditional jump or move depends on uninitialised value(s)
==20595==    at 0x48D11C2: __vfprintf_internal (vfprintf-internal.c:1688)
==20595==    by 0x48D4021: buffered_vfprintf (vfprintf-internal.c:2377)
==20595==    by 0x48D0EA3: __vfprintf_internal (vfprintf-internal.c:1346)
==20595==    by 0x48BBEBE: printf (printf.c:33)
==20595==    by 0x1094A5: test_print_cmd (test_cmd.c:17)
==20595==    by 0x10A133: main (test_cmd.c:251)
==20595==  Uninitialised value was created by a heap allocation
==20595==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20595==    by 0x10B23B: cmd_new (cmd.c:25)
==20595==    by 0x10A0FA: main (test_cmd.c:247)
==20595== 
==20595== Conditional jump or move depends on uninitialised value(s)
==20595==    at 0x1094BB: test_print_cmd (test_cmd.c:18)
==20595==    by 0x10A133: main (test_cmd.c:251)
==20595==  Uninitialised value was created by a heap allocation
==20595==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20595==    by 0x10B23B: cmd_new (cmd.c:25)
==20595==    by 0x10A0FA: main (test_cmd.c:247)
==20595== 
==20595== Conditional jump or move depends on uninitialised value(s)
==20595==    at 0x483EF49: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20595==    by 0x48D2E94: __vfprintf_internal (vfprintf-internal.c:1688)
==20595==    by 0x48D4021: buffered_vfprintf (vfprintf-internal.c:2377)
==20595==    by 0x48D0EA3: __vfprintf_internal (vfprintf-internal.c:1346)
==20595==    by 0x48BBEBE: printf (printf.c:33)
==20595==    by 0x109613: test_print_cmd (test_cmd.c:30)
==20595==    by 0x10A133: main (test_cmd.c:251)
==20595==  Uninitialised value was created by a heap allocation
==20595==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20595==    by 0x10B645: read_all (cmd.c:140)
==20595==    by 0x10B727: cmd_fetch_output (cmd.c:174)
==20595==    by 0x10B5CD: cmd_update_state (cmd.c:119)
==20595==    by 0x10A124: main (test_cmd.c:249)
==20595== 
==20595== Conditional jump or move depends on uninitialised value(s)
==20595==    at 0x10B3E5: cmd_free (cmd.c:49)
==20595==    by 0x10A142: main (test_cmd.c:252)
==20595==  Uninitialised value was created by a heap allocation
==20595==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==20595==    by 0x10B23B: cmd_new (cmd.c:25)
==20595==    by 0x10A0FA: main (test_cmd.c:247)
==20595== 
==20595== 
==20595== HEAP SUMMARY:
==20595==     in use at exit: 0 bytes in 0 blocks
==20595==   total heap usage: 5 allocs, 5 frees, 3,118 bytes allocated
==20595== 
==20595== All heap blocks were freed -- no leaks are possible
==20595== 
==20595== For lists of detected and suppressed errors, rerun with: -s
==20595== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)

