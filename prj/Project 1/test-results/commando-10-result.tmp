(TEST 10) rm, compile, run print_args
COMMENTS:
Remove an executable in the test_data/ directory if present. Compile
it, then run it.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-10-expect.tmp
- Actual output in: test-results/raw/commando-10-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                                          ==== ACTUAL ====                                                                       
@> rm -f ./test_data/print_args                                                         | @>
@> wait-for 0                                                                           <
@> gcc -o test_data/print_args test_data/print_args.c                                   <
@> wait-for 1                                                                           <
@> test_data/print_args hello goodbye so long                                           <
@> wait-for 2                                                                           <
@> list                                                                                 <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                                             <
0    %0           0    EXIT(0)    0 rm -f ./test_data/print_args                        <
1    %1           0    EXIT(0)    0 gcc -o test_data/print_args test_data/print_args.c  <
2    %2           0    EXIT(0)   74 test_data/print_args hello goodbye so long          <
@> output-for 0                                                                         <
@<<< Output for rm[%0] (0 bytes):                                                       <
----------------------------------------                                                <
----------------------------------------                                                <
@> output-for 1                                                                         <
@<<< Output for gcc[%1] (0 bytes):                                                      <
----------------------------------------                                                <
----------------------------------------                                                <
@> output-for 2                                                                         <
@<<< Output for test_data/print_args[%2] (74 bytes):                                    <
----------------------------------------                                                <
5 args received                                                                         <
0: test_data/print_args                                                                 <
1: hello                                                                                <
2: goodbye                                                                              <
3: so                                                                                   <
4: long                                                                                 <
----------------------------------------                                                <
@> exit                                                                                 <
ALERTS:                                                                                   ALERTS:
@!!! rm[%0]: EXIT(0)                                                                    <
@!!! gcc[%1]: EXIT(0)                                                                   <
@!!! test_data/print_args[%2]: EXIT(0)                                                  <
--- Line Differences ---
EXPECT:   1) @> rm -f ./test_data/print_args
EXPECT:   2) @> wait-for 0
EXPECT:   3) @> gcc -o test_data/print_args test_data/print_args.c
EXPECT:   4) @> wait-for 1
EXPECT:   5) @> test_data/print_args hello goodbye so long
EXPECT:   6) @> wait-for 2
EXPECT:   7) @> list
EXPECT:   8) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:   9) 0    %0           0    EXIT(0)    0 rm -f ./test_data/print_args 
EXPECT:  10) 1    %1           0    EXIT(0)    0 gcc -o test_data/print_args test_data/print_args.c 
EXPECT:  11) 2    %2           0    EXIT(0)   74 test_data/print_args hello goodbye so long 
EXPECT:  12) @> output-for 0
EXPECT:  13) @<<< Output for rm[%0] (0 bytes):
EXPECT:  14) ----------------------------------------
EXPECT:  15) ----------------------------------------
EXPECT:  16) @> output-for 1
EXPECT:  17) @<<< Output for gcc[%1] (0 bytes):
EXPECT:  18) ----------------------------------------
EXPECT:  19) ----------------------------------------
EXPECT:  20) @> output-for 2
EXPECT:  21) @<<< Output for test_data/print_args[%2] (74 bytes):
EXPECT:  22) ----------------------------------------
EXPECT:  23) 5 args received
EXPECT:  24) 0: test_data/print_args
EXPECT:  25) 1: hello
EXPECT:  26) 2: goodbye
EXPECT:  27) 3: so
EXPECT:  28) 4: long
EXPECT:  29) ----------------------------------------
EXPECT:  30) @> exit
ACTUAL:   1) @>
EXPECT:  32) @!!! rm[%0]: EXIT(0)
EXPECT:  33) @!!! gcc[%1]: EXIT(0)
EXPECT:  34) @!!! test_data/print_args[%2]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-10-valgrd.tmp ---
==21302== Memcheck, a memory error detector
==21302== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21302== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==21302== Command: ./commando --echo
==21302== Parent PID: 21301
==21302== 
==21302== Invalid write of size 1
==21302==    at 0x48DDA01: _IO_getline_info (iogetline.c:77)
==21302==    by 0x48DC849: fgets (iofgets.c:53)
==21302==    by 0x1095CC: main (commando.c:37)
==21302==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==21302== 
==21302== 
==21302== Process terminating with default action of signal 11 (SIGSEGV)
==21302==  Access not within mapped region at address 0x0
==21302==    at 0x48DDA01: _IO_getline_info (iogetline.c:77)
==21302==    by 0x48DC849: fgets (iofgets.c:53)
==21302==    by 0x1095CC: main (commando.c:37)
==21302==  If you believe this happened as a result of a stack
==21302==  overflow in your program's main thread (unlikely but
==21302==  possible), you can try to increase the size of the
==21302==  main thread stack using the --main-stacksize= flag.
==21302==  The main thread stack size used in this run was 8388608.
==21302== 
==21302== HEAP SUMMARY:
==21302==     in use at exit: 8,200 bytes in 1 blocks
==21302==   total heap usage: 1 allocs, 0 frees, 8,200 bytes allocated
==21302== 
==21302== 8,200 bytes in 1 blocks are still reachable in loss record 1 of 1
==21302==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==21302==    by 0x109599: main (commando.c:33)
==21302== 
==21302== LEAK SUMMARY:
==21302==    definitely lost: 0 bytes in 0 blocks
==21302==    indirectly lost: 0 bytes in 0 blocks
==21302==      possibly lost: 0 bytes in 0 blocks
==21302==    still reachable: 8,200 bytes in 1 blocks
==21302==         suppressed: 0 bytes in 0 blocks
==21302== 
==21302== For lists of detected and suppressed errors, rerun with: -s
==21302== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

